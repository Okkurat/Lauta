{"ast":null,"code":"var _jsxFileName = \"D:\\\\Lauta\\\\client\\\\lauta\\\\src\\\\Thread.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport './App.css';\nimport PostHeader from \"./PostHeader\";\nimport PostReply from \"./PostReply\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Thread() {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [posts, setPosts] = useState(null);\n  const [Thread, setThread] = useState(null);\n  const [spinner, setSpinner] = useState(false);\n  const [replyBox, setReplyBox] = useState(false);\n  const [selectedPostId, setSelectedPostId] = useState(null);\n  const handleButtonClick = e => {\n    console.log(e.target.innerText);\n    setSelectedPostId(e.target.innerText);\n    setReplyBox(!replyBox);\n    reply();\n  };\n  useEffect(() => {\n    setSpinner(true);\n    fetch(`http://localhost:4000/thread/${id}`).then(response => response.json()).then(data => {\n      setSpinner(false);\n      console.log(data);\n      if (data.message === \"404\") {\n        return;\n      }\n      setThread(data);\n    }).catch(error => console.error(error));\n  }, [id]);\n  useEffect(() => {\n    const fetchData = async () => {\n      setSpinner(true);\n      fetch(`http://localhost:4000/posts/${id}`).then(response => response.text()).then(data => {\n        console.log(data);\n        if (data.message === \"404\") {\n          return;\n        }\n        setPosts(data);\n      }).catch(error => console.error(error));\n    };\n    fetchData();\n    const interval = setInterval(() => {\n      fetchData();\n    }, 30000);\n    return () => clearInterval(interval);\n  }, []);\n  const reply = () => {\n    if (replyBox) {\n      setReplyBox(false);\n      return;\n    }\n    setReplyBox(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [spinner ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spinner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this) : Thread ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"threadContainer\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"postContainer\",\n        children: /*#__PURE__*/_jsxDEV(PostHeader, {\n          Thread: Thread,\n          showButton: true,\n          ButtonOnClick: handleButtonClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"404 Thread not found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this)\n    }, void 0, false), replyBox && /*#__PURE__*/_jsxDEV(PostReply, {\n      postId: selectedPostId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n_s(Thread, \"oFxeg1S1MlOAEr1JBtyOcugbNf0=\", false, function () {\n  return [useParams];\n});\n_c = Thread;\nexport default Thread;\nvar _c;\n$RefreshReg$(_c, \"Thread\");","map":{"version":3,"names":["React","useParams","useState","useEffect","PostHeader","PostReply","jsxDEV","_jsxDEV","Fragment","_Fragment","Thread","_s","id","posts","setPosts","setThread","spinner","setSpinner","replyBox","setReplyBox","selectedPostId","setSelectedPostId","handleButtonClick","e","console","log","target","innerText","reply","fetch","then","response","json","data","message","catch","error","fetchData","text","interval","setInterval","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","showButton","ButtonOnClick","postId","_c","$RefreshReg$"],"sources":["D:/Lauta/client/lauta/src/Thread.js"],"sourcesContent":["import React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useState, useEffect } from \"react\";\r\nimport './App.css';\r\nimport PostHeader from \"./PostHeader\";\r\nimport PostReply from \"./PostReply\";\r\n\r\nfunction Thread() {\r\n    const { id } = useParams();\r\n    const [posts, setPosts] = useState(null)\r\n    const [Thread, setThread] = useState(null);\r\n    const [spinner, setSpinner] = useState(false);\r\n    const [replyBox, setReplyBox] = useState(false);\r\n    const [selectedPostId, setSelectedPostId] = useState(null);\r\n    \r\n\r\n    const handleButtonClick = (e) => {\r\n        console.log(e.target.innerText)\r\n        setSelectedPostId(e.target.innerText);\r\n        setReplyBox(!replyBox);\r\n        reply()\r\n    };\r\n\r\n    useEffect(() => {\r\n        setSpinner(true);\r\n        fetch(`http://localhost:4000/thread/${id}`)\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n            setSpinner(false);\r\n            console.log(data);\r\n            if (data.message === \"404\") {\r\n                return;\r\n            }\r\n            setThread(data);\r\n            })\r\n            .catch((error) => console.error(error));\r\n    }, [id]);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () =>\r\n        {\r\n        setSpinner(true);\r\n        fetch(`http://localhost:4000/posts/${id}`)\r\n            .then((response) => response.text())\r\n            .then((data) => {\r\n            console.log(data);\r\n            if (data.message === \"404\") {\r\n                return;\r\n            }\r\n            setPosts(data);\r\n            })\r\n            .catch((error) => console.error(error));\r\n        }\r\n        fetchData()\r\n        const interval = setInterval(() => {\r\n            fetchData();\r\n        }, 30000);\r\n        return () => clearInterval(interval);\r\n  }, []);\r\n\r\nconst reply = () => {\r\n    if(replyBox){\r\n        setReplyBox(false)\r\n        return\r\n    }\r\n    setReplyBox(true);\r\n};\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {spinner ? (\r\n        <div className=\"spinner\"></div>\r\n      ) : Thread ? (\r\n        <div className=\"threadContainer\">\r\n            <div className=\"postContainer\">\r\n                <PostHeader Thread={Thread} showButton={true} ButtonOnClick={handleButtonClick}/>\r\n            </div>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <h2>404 Thread not found</h2>\r\n        </>\r\n      )}\r\n      {replyBox && <PostReply postId={selectedPostId}></PostReply>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Thread;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}