{"ast":null,"code":"var _jsxFileName = \"D:\\\\Lauta\\\\client\\\\lauta\\\\src\\\\Thread.js\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Thread() {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [posts, setPosts] = useState([]);\n  const [Thread, setThread] = useState(null);\n  const [spinner, setSpinner] = useState(false);\n  const [replyBox, setReplyBox] = useState(false);\n  const [selectedPostId, setSelectedPostId] = useState(null);\n  useEffect(() => {\n    setSpinner(true);\n    fetch(`http://localhost:4000/thread/${id}`).then(response => response.json()).then(data => {\n      setSpinner(false);\n      console.log(data);\n      if (data.message === \"404\") {\n        return;\n      }\n      setThread(data);\n    }).catch(error => console.error(error));\n  }, [id]);\n  useEffect(() => {\n    const fetchData = async () => {\n      setSpinner(true);\n      fetch(`http://localhost:4000/posts/${id}`).then(response => response.json()).then(data => {\n        console.log(data);\n        if (data.message === \"404\") {\n          setPosts([]);\n        } else {\n          setPosts(data);\n        }\n      }).catch(error => console.error(error)).finally(() => {\n        setSpinner(false);\n      });\n    };\n    fetchData();\n    const interval = setInterval(() => {\n      fetchData();\n    }, 30000);\n    return () => clearInterval(interval);\n  }, [id]);\n  const reply = () => {\n    if (replyBox) {\n      setReplyBox(false);\n      return;\n    }\n    setReplyBox(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [spinner ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spinner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this) : Thread ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"threadContainer\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"postContainer\",\n        children: /*#__PURE__*/_jsxDEV(PostHeader, {\n          Thread: Thread,\n          showButton: true,\n          ButtonOnClick: handleButtonClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"404 Thread not found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this)\n    }, void 0, false), replyBox && /*#__PURE__*/_jsxDEV(PostReply, {\n      postId: selectedPostId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 22\n    }, this), posts.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"postList\",\n      children: posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(PostHeader, {\n          Thread: post,\n          showButton: true,\n          ButtonOnClick: handleButtonClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 25\n        }, this)\n      }, post.ID, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"No posts found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n}\n_s(Thread, \"f/0uI6XplW/H0/4fN4/Rrmuxp4A=\", true);\n_c = Thread;\nvar _c;\n$RefreshReg$(_c, \"Thread\");","map":{"version":3,"names":["Thread","_s","id","useParams","posts","setPosts","useState","setThread","spinner","setSpinner","replyBox","setReplyBox","selectedPostId","setSelectedPostId","useEffect","fetch","then","response","json","data","console","log","message","catch","error","fetchData","finally","interval","setInterval","clearInterval","reply","_jsxDEV","className","children","fileName","_jsxFileName","lineNumber","columnNumber","PostHeader","showButton","ButtonOnClick","handleButtonClick","_Fragment","PostReply","postId","length","map","post","ID","_c","$RefreshReg$"],"sources":["D:/Lauta/client/lauta/src/Thread.js"],"sourcesContent":["function Thread() {\r\n    const { id } = useParams();\r\n    const [posts, setPosts] = useState([]);\r\n    const [Thread, setThread] = useState(null);\r\n    const [spinner, setSpinner] = useState(false);\r\n    const [replyBox, setReplyBox] = useState(false);\r\n    const [selectedPostId, setSelectedPostId] = useState(null);\r\n\r\n    useEffect(() => {\r\n        setSpinner(true);\r\n        fetch(`http://localhost:4000/thread/${id}`)\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n            setSpinner(false);\r\n            console.log(data);\r\n            if (data.message === \"404\") {\r\n                return;\r\n            }\r\n            setThread(data);\r\n            })\r\n            .catch((error) => console.error(error));\r\n    }, [id]);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () =>\r\n        {\r\n        setSpinner(true);\r\n        fetch(`http://localhost:4000/posts/${id}`)\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n            console.log(data);\r\n            if (data.message === \"404\") {\r\n                setPosts([]);\r\n            } else {\r\n                setPosts(data);\r\n            }\r\n            })\r\n            .catch((error) => console.error(error))\r\n            .finally(() => {\r\n                setSpinner(false);\r\n            });\r\n        }\r\n        fetchData();\r\n        const interval = setInterval(() => {\r\n            fetchData();\r\n        }, 30000);\r\n        return () => clearInterval(interval);\r\n  }, [id]);\r\n\r\n    const reply = () => {\r\n        if(replyBox){\r\n            setReplyBox(false)\r\n            return\r\n        }\r\n        setReplyBox(true);\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\">\r\n        {spinner ? (\r\n            <div className=\"spinner\"></div>\r\n        ) : Thread ? (\r\n            <div className=\"threadContainer\">\r\n                <div className=\"postContainer\">\r\n                    <PostHeader Thread={Thread} showButton={true} ButtonOnClick={handleButtonClick}/>\r\n                </div>\r\n            </div>\r\n        ) : (\r\n            <>\r\n            <h2>404 Thread not found</h2>\r\n            </>\r\n        )}\r\n        {replyBox && <PostReply postId={selectedPostId}></PostReply>}\r\n        {posts.length > 0 ? (\r\n            <div className=\"postList\">\r\n                {posts.map((post) => (\r\n                    <div key={post.ID}>\r\n                        <PostHeader Thread={post} showButton={true} ButtonOnClick={handleButtonClick}/>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        ) : (\r\n            <h2>No posts found</h2>\r\n        )}\r\n        </div>\r\n    );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}