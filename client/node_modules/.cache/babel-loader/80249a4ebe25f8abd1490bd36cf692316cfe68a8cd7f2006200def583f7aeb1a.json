{"ast":null,"code":"var _jsxFileName = \"D:\\\\Lauta\\\\client\\\\lauta\\\\src\\\\ThreadMaker.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ThreadMaker() {\n  _s();\n  const [title, setTitle] = useState(\"\");\n  const [text, setText] = useState(\"\");\n  async function handleThread(e) {\n    e.preventDefault();\n    fetch(\"http://localhost:4000/thread\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        topic: title,\n        text: text\n      })\n    }).then(response => response.json()).then(data => console.log(data)).catch(error => console.error(error));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ThreadMaker\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleThread,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Title\",\n        name: \"title\",\n        value: title,\n        onChange: e => setTitle(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Post text\",\n        name: \"text\",\n        value: text,\n        onChange: e => setText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Post Thread\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n_s(ThreadMaker, \"CK0Xj8E/e+j/Ei6ec+EST3ick6k=\");\n_c = ThreadMaker;\nexport default ThreadMaker;\nvar _c;\n$RefreshReg$(_c, \"ThreadMaker\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ThreadMaker","_s","title","setTitle","text","setText","handleThread","e","preventDefault","fetch","method","headers","body","JSON","stringify","topic","then","response","json","data","console","log","catch","error","className","children","onSubmit","type","placeholder","name","value","onChange","target","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Lauta/client/lauta/src/ThreadMaker.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction ThreadMaker() {\r\n  const [title, setTitle] = useState(\"\");\r\n  const [text, setText] = useState(\"\");\r\n\r\n  async function handleThread(e) {\r\n    e.preventDefault();\r\n    fetch(\"http://localhost:4000/thread\", {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({ \r\n                            topic: title,\r\n                            text: text\r\n                            })\r\n    })\r\n    .then(response => response.json())\r\n    .then(data => console.log(data))\r\n    .catch(error => console.error(error))\r\n  }\r\n\r\n  return (\r\n    <div className=\"ThreadMaker\">\r\n      <form onSubmit={handleThread}>\r\n        <input type=\"text\" placeholder=\"Title\" name=\"title\" value={title} onChange={(e) => setTitle(e.target.value)} />\r\n        <input type=\"text\" placeholder=\"Post text\" name=\"text\" value={text} onChange={(e) => setText(e.target.value)} />\r\n        <button type=\"submit\">Post Thread</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ThreadMaker;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACO,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEpC,eAAeS,YAAYA,CAACC,CAAC,EAAE;IAC7BA,CAAC,CAACC,cAAc,EAAE;IAClBC,KAAK,CAAC,8BAA8B,EAAE;MACpCC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACCC,KAAK,EAAEb,KAAK;QACZE,IAAI,EAAEA;MACN,CAAC;IACzB,CAAC,CAAC,CACDY,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAIC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC,CAAC,CAC/BG,KAAK,CAACC,KAAK,IAAIH,OAAO,CAACG,KAAK,CAACA,KAAK,CAAC,CAAC;EACvC;EAEA,oBACExB,OAAA;IAAKyB,SAAS,EAAC,aAAa;IAAAC,QAAA,eAC1B1B,OAAA;MAAM2B,QAAQ,EAAEpB,YAAa;MAAAmB,QAAA,gBAC3B1B,OAAA;QAAO4B,IAAI,EAAC,MAAM;QAACC,WAAW,EAAC,OAAO;QAACC,IAAI,EAAC,OAAO;QAACC,KAAK,EAAE5B,KAAM;QAAC6B,QAAQ,EAAGxB,CAAC,IAAKJ,QAAQ,CAACI,CAAC,CAACyB,MAAM,CAACF,KAAK;MAAE;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG,eAC/GrC,OAAA;QAAO4B,IAAI,EAAC,MAAM;QAACC,WAAW,EAAC,WAAW;QAACC,IAAI,EAAC,MAAM;QAACC,KAAK,EAAE1B,IAAK;QAAC2B,QAAQ,EAAGxB,CAAC,IAAKF,OAAO,CAACE,CAAC,CAACyB,MAAM,CAACF,KAAK;MAAE;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG,eAChHrC,OAAA;QAAQ4B,IAAI,EAAC,QAAQ;QAAAF,QAAA,EAAC;MAAW;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACrC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACH;AAEV;AAACnC,EAAA,CA9BQD,WAAW;AAAAqC,EAAA,GAAXrC,WAAW;AAgCpB,eAAeA,WAAW;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}