{"ast":null,"code":"var _jsxFileName = \"D:\\\\Lauta\\\\client\\\\lauta\\\\src\\\\PostReply.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PostReply(_ref) {\n  _s();\n  let {\n    postId\n  } = _ref;\n  const {\n    threadID\n  } = useParams();\n  const [text, setText] = useState(\"\");\n  function handleKeyDown(event) {\n    if (event.key === \"Enter\") {\n      event.preventDefault();\n      setText(text + \"\\n\");\n    }\n  }\n  useEffect(() => {\n    if (postId) {\n      setText(() => `>>${postId}\\n`);\n    }\n    return () => {\n      setText(\"\");\n    };\n  }, [postId]);\n  async function handleReply(e) {\n    e.preventDefault();\n    console.log(text);\n    if (!text.trim()) {\n      alert(\"Text must be provided.\");\n      return;\n    }\n    let reply;\n    const match = text.match(/^>>(\\d+)/);\n    if (match) {\n      reply = match[1];\n    } else {\n      reply = null;\n    }\n    const element = document.querySelector(\".replyButton\").innerHTML;\n    const data = {\n      thread: element,\n      text: text,\n      reply: reply\n    };\n    const options = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    };\n    console.log(data);\n    fetch(\"http://localhost:4000/post\", options).then(response => response.json()).then(data => {\n      console.log(data);\n      console.log(\"THIS SHOULD HAPPEN\");\n    }).catch(error => console.error(error));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"PostReply\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleReply,\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        type: \"text\",\n        placeholder: \"Post text\",\n        name: \"text\",\n        value: text,\n        onChange: e => setText(e.target.value),\n        onKeyDown: handleKeyDown\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Post Reply\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_s(PostReply, \"aweZxW6y7Rga4h+H9ePRJG+itCg=\", false, function () {\n  return [useParams];\n});\n_c = PostReply;\nexport default PostReply;\nvar _c;\n$RefreshReg$(_c, \"PostReply\");","map":{"version":3,"names":["React","useState","useEffect","useParams","jsxDEV","_jsxDEV","PostReply","_ref","_s","postId","threadID","text","setText","handleKeyDown","event","key","preventDefault","handleReply","e","console","log","trim","alert","reply","match","element","document","querySelector","innerHTML","data","thread","options","method","headers","body","JSON","stringify","fetch","then","response","json","catch","error","className","children","onSubmit","type","placeholder","name","value","onChange","target","onKeyDown","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Lauta/client/lauta/src/PostReply.js"],"sourcesContent":["import './App.css';\r\nimport React, { useState, useEffect } from \"react\"\r\nimport { useParams } from 'react-router-dom';\r\n\r\nfunction PostReply({ postId }) {\r\n\r\n    const { threadID } = useParams();\r\n    const [text, setText] = useState(\"\");\r\n\r\n    function handleKeyDown(event) {\r\n        if (event.key === \"Enter\") {\r\n          event.preventDefault();\r\n          setText(text + \"\\n\");\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (postId) {\r\n          setText(() => `>>${postId}\\n`);\r\n        }\r\n        return () => {\r\n            setText(\"\");\r\n        };\r\n    }, [postId]);\r\n\r\n\r\n    async function handleReply (e) {\r\n        e.preventDefault()\r\n        console.log(text)\r\n        if(!text.trim()){\r\n            alert(\"Text must be provided.\");\r\n            return;\r\n        }\r\n\r\n        let reply;\r\n        const match = text.match(/^>>(\\d+)/);\r\n        if (match) {\r\n            reply = match[1];\r\n          } else {\r\n            reply = null\r\n        }\r\n\r\n        const element = document.querySelector(\".replyButton\").innerHTML;\r\n\r\n        const data = {thread: element, text: text, reply: reply}\r\n\r\n        const options = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(data)\r\n        };\r\n\r\n        console.log(data)\r\n\r\n\r\n        fetch(\"http://localhost:4000/post\", options)\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            console.log(data)\r\n            console.log(\"THIS SHOULD HAPPEN\")\r\n        })\r\n        .catch(error => console.error(error))\r\n      }\r\n\r\n    return (\r\n    <div className=\"PostReply\">\r\n        <form onSubmit={handleReply}>\r\n            <textarea type=\"text\" placeholder=\"Post text\" name=\"text\" value={text} onChange={(e) => setText(e.target.value)} onKeyDown={handleKeyDown} />\r\n            <button type=\"submit\">Post Reply</button>\r\n        </form>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default PostReply;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}