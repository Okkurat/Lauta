{"ast":null,"code":"var _jsxFileName = \"D:\\\\Lauta\\\\client\\\\lauta\\\\src\\\\Thread.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useState, useEffect, useRef } from \"react\";\nimport './App.css';\nimport PostHeader from \"./PostHeader\";\nimport PostReply from \"./PostReply\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Thread() {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [Thread, setThread] = useState(null);\n  const [spinner, setSpinner] = useState(false);\n  const [replyBox, setReplyBox] = useState(false);\n  const [selectedPostId, setSelectedPostId] = useState(null);\n  const handleButtonClick = e => {\n    console.log(e.target.innerText);\n    setSelectedPostId(e.target.innerText);\n    setReplyBox(!replyBox);\n    reply();\n  };\n  useEffect(() => {\n    setSpinner(true);\n    fetch(`http://localhost:4000/thread/${id}`).then(response => response.json()).then(data => {\n      setSpinner(false);\n      console.log(data);\n      if (data.message === \"404\") {\n        return;\n      }\n      setThread(data);\n    }).catch(error => console.error(error));\n  }, [id]);\n  const reply = () => {\n    if (replyBox) {\n      setReplyBox(false);\n      return;\n    }\n    setReplyBox(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [spinner ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spinner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this) : Thread ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"threadContainer\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"postContainer\",\n        children: /*#__PURE__*/_jsxDEV(PostHeader, {\n          Thread: Thread,\n          showButton: true,\n          ButtonOnClick: handleButtonClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"404 Thread not found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this)\n    }, void 0, false), replyBox && /*#__PURE__*/_jsxDEV(PostReply, {\n      postId: selectedPostId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n_s(Thread, \"tXYH1KQtdJEBSsXugFA6CNKafY8=\", false, function () {\n  return [useParams];\n});\n_c = Thread;\nexport default Thread;\nvar _c;\n$RefreshReg$(_c, \"Thread\");","map":{"version":3,"names":["React","useParams","useState","useEffect","useRef","PostHeader","PostReply","jsxDEV","_jsxDEV","Fragment","_Fragment","Thread","_s","id","setThread","spinner","setSpinner","replyBox","setReplyBox","selectedPostId","setSelectedPostId","handleButtonClick","e","console","log","target","innerText","reply","fetch","then","response","json","data","message","catch","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","showButton","ButtonOnClick","postId","_c","$RefreshReg$"],"sources":["D:/Lauta/client/lauta/src/Thread.js"],"sourcesContent":["import React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useState, useEffect, useRef } from \"react\";\r\nimport './App.css';\r\nimport PostHeader from \"./PostHeader\";\r\nimport PostReply from \"./PostReply\";\r\n\r\nfunction Thread() {\r\n  const { id } = useParams();\r\n  const [Thread, setThread] = useState(null);\r\n  const [spinner, setSpinner] = useState(false);\r\n  const [replyBox, setReplyBox] = useState(false);\r\n  const [selectedPostId, setSelectedPostId] = useState(null);\r\n\r\n  const handleButtonClick = (e) => {\r\n    console.log(e.target.innerText)\r\n    setSelectedPostId(e.target.innerText);\r\n    setReplyBox(!replyBox);\r\n    reply()\r\n  };\r\n\r\n  useEffect(() => {\r\n    setSpinner(true);\r\n    fetch(`http://localhost:4000/thread/${id}`)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setSpinner(false);\r\n        console.log(data);\r\n        if (data.message === \"404\") {\r\n          return;\r\n        }\r\n        setThread(data);\r\n      })\r\n      .catch((error) => console.error(error));\r\n  }, [id]);\r\n\r\n  const reply = () => {\r\n    if(replyBox){\r\n        setReplyBox(false)\r\n        return\r\n    }\r\n    setReplyBox(true);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {spinner ? (\r\n        <div className=\"spinner\"></div>\r\n      ) : Thread ? (\r\n        <div className=\"threadContainer\">\r\n            <div className=\"postContainer\">\r\n                <PostHeader Thread={Thread} showButton={true} ButtonOnClick={handleButtonClick}/>\r\n            </div>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <h2>404 Thread not found</h2>\r\n        </>\r\n      )}\r\n      {replyBox && <PostReply postId={selectedPostId}></PostReply>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Thread;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}